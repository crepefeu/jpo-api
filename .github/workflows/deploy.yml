name: Deploy PHP API

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APP_ENV: PROD
      DB_HOST: localhost
      DB_NAME: jpo_iut_meaux_mmi
      DB_USER: WEB_APP
      DB_PASS: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php-

      - name: Install dependencies
        if: hashFiles('composer.json') != ''
        run: composer install --prefer-dist --no-progress

      - name: Setup environment file
        run: |
          cp .env.production .env
          sed -i "s|\${DB_USER}|${{ secrets.DB_USER }}|g" .env
          sed -i "s|\${DB_PASSWORD}|${{ secrets.DB_PASSWORD }}|g" .env
          sed -i "s|\${JWT_SECRET}|${{ secrets.JWT_SECRET }}|g" .env

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .
            !.git
            !.github
            !tests
            !.htaccess

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.base_ref == 'main' && github.event_name == 'pull_request')

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./build

      - name: Prepare files for transfer
        run: |
          cd build
          tar -czf ../deploy.tar.gz .

      - name: Setup remote directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            # Create directories with proper permissions
            sudo rm -rf /var/www/jpo-api
            sudo mkdir -p /var/www/jpo-api
            sudo chown ubuntu:ubuntu /var/www/jpo-api
            sudo chmod 755 /var/www/jpo-api

      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY }}
          source: "deploy.tar.gz"
          target: "/var/www/jpo-api/"

      - name: Extract and configure
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            echo "üì¶ Extracting deployment files..."
            cd /var/www/jpo-api
            tar -xzf deploy.tar.gz
            rm deploy.tar.gz

            echo "üîí Setting up file permissions..."
            sudo chown -R www-data:www-data .
            sudo find . -type f -exec chmod 644 {} \;
            sudo find . -type d -exec chmod 755 {} \;

            echo "üìÇ Setting up storage directories..."
            for dir in storage storage/logs storage/cache; do
              if [ -d "$dir" ]; then
                sudo chmod -R 775 "$dir"
              fi
            done

            echo "üêò Detecting PHP version..."
            PHP_VERSION=$(php -v | head -n1 | cut -d' ' -f2 | cut -d'.' -f1,2)
            PHP_FPM_SERVICE="php${PHP_VERSION}-fpm"
            echo "Found PHP version: ${PHP_VERSION}"

            echo "üîê Setting up SSL certificates..."
            if ! command -v certbot &> /dev/null; then
              echo "Installing Certbot..."
              sudo apt-get update
              sudo apt-get install -y certbot python3-certbot-nginx
            fi

            if [ ! -f "/etc/letsencrypt/live/api.jpo.3st3ban.dev/fullchain.pem" ]; then
              echo "Generating SSL certificate..."
              sudo certbot certonly --standalone \
                --non-interactive \
                --agree-tos \
                --email erodriguez10@myges.fr \
                -d api.jpo.3st3ban.dev \
                --pre-hook "sudo systemctl stop nginx" \
                --post-hook "sudo systemctl start nginx"
            else
              echo "SSL certificate already exists"
            fi

            echo "‚öôÔ∏è Configuring Nginx..."
            sudo mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled
            sudo cp nginx/jpo-api.conf /etc/nginx/sites-available/
            sudo ln -sf /etc/nginx/sites-available/jpo-api.conf /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default

            echo "üì¶ Installing PHP-FPM if needed..."
            if ! dpkg -l | grep -q "^ii.*${PHP_FPM_SERVICE}"; then
              sudo apt-get update
              sudo apt-get install -y ${PHP_FPM_SERVICE}
            fi

            echo "üîÑ Restarting services..."
            if sudo systemctl restart ${PHP_FPM_SERVICE}; then
              echo "‚úÖ PHP-FPM restarted successfully"
            else
              echo "‚ö†Ô∏è Failed to restart PHP-FPM"
            fi

            if sudo nginx -t; then
              echo "‚úÖ Nginx configuration test passed"
              if sudo systemctl restart nginx; then
                echo "‚úÖ Nginx restarted successfully"
              else
                echo "‚ö†Ô∏è Failed to restart Nginx"
              fi
            else
              echo "‚ùå Nginx configuration test failed"
              exit 1
            fi

            echo "‚úÖ Deployment completed successfully!"
