name: Deploy PHP API

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APP_ENV: PROD
      DB_HOST: localhost
      DB_NAME: jpo_iut_meaux_mmi
      DB_USER: WEB_APP
      DB_PASS: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php-

      - name: Install dependencies
        if: hashFiles('composer.json') != ''
        run: composer install --prefer-dist --no-progress

      - name: Setup environment file
        run: |
          cp .env.production .env
          sed -i "s|\${DB_USER}|${{ secrets.DB_USER }}|g" .env
          sed -i "s|\${DB_PASSWORD}|${{ secrets.DB_PASSWORD }}|g" .env
          sed -i "s|\${JWT_SECRET}|${{ secrets.JWT_SECRET }}|g" .env

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .
            .env
            !.git
            !.github
            !tests
            !.htaccess

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Create deployment package
        run: |
          tar -czf deploy.tar.gz *
          ls -la deploy.tar.gz

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            # Create temp directory with proper permissions
            sudo mkdir -p /tmp/deploy
            sudo chown ubuntu:ubuntu /tmp/deploy
            
            # Setup application directory
            sudo mkdir -p /var/www/jpo-api
            cd /var/www/jpo-api

            # Backup nginx configuration if it exists
            if [ -d "nginx" ]; then
              sudo mv nginx /tmp/nginx.bak
            fi

            # Clean up existing files
            sudo rm -rf ./*

            # Restore nginx configuration
            if [ -d "/tmp/nginx.bak" ]; then
              sudo mv /tmp/nginx.bak nginx
            fi

      - name: Transfer files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY }}
          source: "deploy.tar.gz"
          target: "/tmp/deploy"

      - name: Configure deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            # Install PHP MySQL extension
            sudo apt-get update
            sudo apt-get install -y php8.4-mysql
            
            # Verify PHP extensions
            php -m | grep mysql
            
            cd /tmp/deploy
            
            # Extract files
            tar -xzf deploy.tar.gz
            rm deploy.tar.gz

            # Move files to final destination
            sudo cp -r . /var/www/jpo-api/
            cd /var/www/jpo-api

            # Cleanup temp directory
            sudo rm -rf /tmp/deploy

            # Create .env file with sudo
            sudo bash -c 'cat > .env << EOL
            APP_ENV=production
            DB_HOST=localhost
            DB_NAME=jpo_iut_meaux_mmi
            DB_USER=WEB_APP
            DB_PASS=${{ secrets.DB_PASSWORD }}
            WEBAPP_URL=https://jpo.3st3ban.dev
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            RATE_LIMIT_WINDOW=60
            RATE_LIMIT_MAX_REQUESTS=100
            EOL'

            # Set proper permissions
            sudo chown -R www-data:www-data .
            sudo chmod -R 755 .
            sudo chmod 640 .env

            # Configure Nginx
            if [ ! -f "nginx/jpo-api.conf" ]; then
              echo "Error: Nginx configuration file not found!"
              exit 1
            fi
            
            sudo cp nginx/jpo-api.conf /etc/nginx/sites-available/
            sudo ln -sf /etc/nginx/sites-available/jpo-api.conf /etc/nginx/sites-enabled/

            # Validate Nginx configuration
            if ! sudo nginx -t; then
              echo "Error: Invalid Nginx configuration"
              exit 1
            fi

            # Restart services
            sudo systemctl restart php8.4-fpm
            sudo systemctl restart nginx
